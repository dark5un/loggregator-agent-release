// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	net "net"

	mock "github.com/stretchr/testify/mock"
)

// IPChecker is an autogenerated mock type for the IPChecker type
type IPChecker struct {
	mock.Mock
}

// CheckBlacklist provides a mock function with given fields: ip
func (_m *IPChecker) CheckBlacklist(ip net.IP) error {
	ret := _m.Called(ip)

	if len(ret) == 0 {
		panic("no return value specified for CheckBlacklist")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(net.IP) error); ok {
		r0 = rf(ip)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResolveAddr provides a mock function with given fields: host
func (_m *IPChecker) ResolveAddr(host string) (net.IP, error) {
	ret := _m.Called(host)

	if len(ret) == 0 {
		panic("no return value specified for ResolveAddr")
	}

	var r0 net.IP
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (net.IP, error)); ok {
		return rf(host)
	}
	if rf, ok := ret.Get(0).(func(string) net.IP); ok {
		r0 = rf(host)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(net.IP)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(host)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIPChecker creates a new instance of IPChecker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIPChecker(t interface {
	mock.TestingT
	Cleanup(func())
}) *IPChecker {
	mock := &IPChecker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
