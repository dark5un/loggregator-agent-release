// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	"sync"
	
	events "github.com/cloudfoundry/sonde-go/events"
	mock "github.com/stretchr/testify/mock"
)

// EnvelopeWriter is an autogenerated mock type for the EnvelopeWriter type
type EnvelopeWriter struct {
	mock.Mock
	
	// Protect shared data
	mu sync.Mutex
	
	// Track calls to Write
	WriteCalledCount int
	
	// Store envelopes for inspection in tests
	Envelopes []*events.Envelope
}

// Write provides a mock function with given fields: event
func (_m *EnvelopeWriter) Write(event *events.Envelope) {
	_m.Called(event)
	
	_m.mu.Lock()
	_m.WriteCalledCount++
	_m.Envelopes = append(_m.Envelopes, event)
	_m.mu.Unlock()
}

// GetWriteCalledCount returns the current call count in a thread-safe way
func (_m *EnvelopeWriter) GetWriteCalledCount() int {
	_m.mu.Lock()
	defer _m.mu.Unlock()
	return _m.WriteCalledCount
}

// GetEnvelopes returns a copy of the current envelopes slice in a thread-safe way
func (_m *EnvelopeWriter) GetEnvelopes() []*events.Envelope {
	_m.mu.Lock()
	defer _m.mu.Unlock()
	result := make([]*events.Envelope, len(_m.Envelopes))
	copy(result, _m.Envelopes)
	return result
}

// GetEnvelopeAt returns the envelope at the specified index in a thread-safe way
func (_m *EnvelopeWriter) GetEnvelopeAt(index int) *events.Envelope {
	_m.mu.Lock()
	defer _m.mu.Unlock()
	if index >= len(_m.Envelopes) {
		return nil
	}
	return _m.Envelopes[index]
}

// NewEnvelopeWriter creates a new instance of EnvelopeWriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEnvelopeWriter(t interface {
	mock.TestingT
	Cleanup(func())
}) *EnvelopeWriter {
	mock := &EnvelopeWriter{
		Envelopes: make([]*events.Envelope, 0),
	}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
