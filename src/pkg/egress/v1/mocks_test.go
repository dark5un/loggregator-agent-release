// Code generated by MockGen. DO NOT EDIT.
// Source: event_marshaller.go

package v1_test

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	metrics "code.cloudfoundry.org/go-metric-registry"
	"github.com/cloudfoundry/sonde-go/events"
)

// MockEnvelopeWriter is a mock of EnvelopeWriter interface
type MockEnvelopeWriter struct {
	ctrl     *gomock.Controller
	recorder *MockEnvelopeWriterMockRecorder
}

// MockEnvelopeWriterMockRecorder is the mock recorder for MockEnvelopeWriter
type MockEnvelopeWriterMockRecorder struct {
	mock *MockEnvelopeWriter
}

// NewMockEnvelopeWriter creates a new mock instance
func NewMockEnvelopeWriter(ctrl *gomock.Controller) *MockEnvelopeWriter {
	mock := &MockEnvelopeWriter{ctrl: ctrl}
	mock.recorder = &MockEnvelopeWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEnvelopeWriter) EXPECT() *MockEnvelopeWriterMockRecorder {
	return m.recorder
}

// Write mocks base method
func (m *MockEnvelopeWriter) Write(event *events.Envelope) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Write", event)
}

// Write indicates an expected call of Write
func (mr *MockEnvelopeWriterMockRecorder) Write(event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockEnvelopeWriter)(nil).Write), event)
}

// MockMetricClient is a mock of MetricClient interface
type MockMetricClient struct {
	ctrl     *gomock.Controller
	recorder *MockMetricClientMockRecorder
}

// MockMetricClientMockRecorder is the mock recorder for MockMetricClient
type MockMetricClientMockRecorder struct {
	mock *MockMetricClient
}

// NewMockMetricClient creates a new mock instance
func NewMockMetricClient(ctrl *gomock.Controller) *MockMetricClient {
	mock := &MockMetricClient{ctrl: ctrl}
	mock.recorder = &MockMetricClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMetricClient) EXPECT() *MockMetricClientMockRecorder {
	return m.recorder
}

// NewCounter mocks base method
func (m *MockMetricClient) NewCounter(name, helpText string, opts ...metrics.MetricOption) metrics.Counter {
	m.ctrl.T.Helper()
	varargs := []interface{}{name, helpText}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewCounter", varargs...)
	ret0, _ := ret[0].(metrics.Counter)
	return ret0
}

// NewCounter indicates an expected call of NewCounter
func (mr *MockMetricClientMockRecorder) NewCounter(name, helpText interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name, helpText}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewCounter", reflect.TypeOf((*MockMetricClient)(nil).NewCounter), varargs...)
}

// MockBatchChainByteWriter is a mock of BatchChainByteWriter interface
type MockBatchChainByteWriter struct {
	ctrl     *gomock.Controller
	recorder *MockBatchChainByteWriterMockRecorder
}

// MockBatchChainByteWriterMockRecorder is the mock recorder for MockBatchChainByteWriter
type MockBatchChainByteWriterMockRecorder struct {
	mock *MockBatchChainByteWriter
}

// NewMockBatchChainByteWriter creates a new mock instance
func NewMockBatchChainByteWriter(ctrl *gomock.Controller) *MockBatchChainByteWriter {
	mock := &MockBatchChainByteWriter{ctrl: ctrl}
	mock.recorder = &MockBatchChainByteWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBatchChainByteWriter) EXPECT() *MockBatchChainByteWriterMockRecorder {
	return m.recorder
}

// Write mocks base method
func (m *MockBatchChainByteWriter) Write(message []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write
func (mr *MockBatchChainByteWriterMockRecorder) Write(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockBatchChainByteWriter)(nil).Write), message)
} 