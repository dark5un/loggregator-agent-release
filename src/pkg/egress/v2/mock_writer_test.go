// Code generated by MockGen. DO NOT EDIT.
// Source: envelope_writer.go

// Package v2_test is a generated GoMock package.
package v2_test

import (
	"context"
	"reflect"

	loggregator_v2 "code.cloudfoundry.org/go-loggregator/v10/rpc/loggregator_v2"
	gomock "github.com/golang/mock/gomock"
)

//go:generate mockgen -package v2_test -destination mock_writer_test.go -source writer.go EnvelopeWriter
//go:generate mockgen -package v2_test -destination mock_envelope_processor_test.go -source envelope_processor.go EnvelopeProcessor

// MockEnvelopeWriter is a mock of EnvelopeWriter interface
type MockEnvelopeWriter struct {
	ctrl     *gomock.Controller
	recorder *MockEnvelopeWriterMockRecorder
}

// MockEnvelopeWriterMockRecorder is the mock recorder for MockEnvelopeWriter
type MockEnvelopeWriterMockRecorder struct {
	mock *MockEnvelopeWriter
}

// NewMockEnvelopeWriter creates a new mock instance
func NewMockEnvelopeWriter(ctrl *gomock.Controller) *MockEnvelopeWriter {
	mock := &MockEnvelopeWriter{ctrl: ctrl}
	mock.recorder = &MockEnvelopeWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEnvelopeWriter) EXPECT() *MockEnvelopeWriterMockRecorder {
	return m.recorder
}

// Write mocks base method
func (m *MockEnvelopeWriter) Write(ctx context.Context, envelopes []*loggregator_v2.Envelope) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", ctx, envelopes)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write
func (mr *MockEnvelopeWriterMockRecorder) Write(ctx, envelopes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockEnvelopeWriter)(nil).Write), ctx, envelopes)
}

// MockEnvelopeProcessor is a mock of EnvelopeProcessor interface
type MockEnvelopeProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockEnvelopeProcessorMockRecorder
}

// MockEnvelopeProcessorMockRecorder is the mock recorder for MockEnvelopeProcessor
type MockEnvelopeProcessorMockRecorder struct {
	mock *MockEnvelopeProcessor
}

// NewMockEnvelopeProcessor creates a new mock instance
func NewMockEnvelopeProcessor(ctrl *gomock.Controller) *MockEnvelopeProcessor {
	mock := &MockEnvelopeProcessor{ctrl: ctrl}
	mock.recorder = &MockEnvelopeProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEnvelopeProcessor) EXPECT() *MockEnvelopeProcessorMockRecorder {
	return m.recorder
}

// Process mocks base method
func (m *MockEnvelopeProcessor) Process(ctx context.Context, envelopes []*loggregator_v2.Envelope) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", ctx, envelopes)
	ret0, _ := ret[0].(error)
	return ret0
}

// Process indicates an expected call of Process
func (mr *MockEnvelopeProcessorMockRecorder) Process(ctx, envelopes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockEnvelopeProcessor)(nil).Process), ctx, envelopes)
}
