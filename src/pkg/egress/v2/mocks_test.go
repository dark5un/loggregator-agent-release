// Code generated by MockGen. DO NOT EDIT.
// Source: transponder.go

package v2_test

import (
	"context"
	"reflect"

	loggregator_v2 "code.cloudfoundry.org/go-loggregator/v10/rpc/loggregator_v2"
	gomock "github.com/golang/mock/gomock"
)

//go:generate mockgen -package v2_test -destination mock_writer_test.go -source envelope_writer.go Writer
//go:generate mockgen -package v2_test -destination mock_envelope_processor_test.go -source envelope_writer.go EnvelopeProcessor
//go:generate mockgen -package v2_test -destination mock_nexter_test.go -source transponder.go Nexter
//go:generate mockgen -package v2_test -destination mock_batch_writer_test.go -source transponder.go BatchWriter
//go:generate mockgen -package v2_test -destination mock_metric_client_test.go -source transponder.go MetricClient

// MockWriter is a mock of Writer interface
type MockWriter struct {
	ctrl     *gomock.Controller
	recorder *MockWriterMockRecorder
}

// MockWriterMockRecorder is the mock recorder for MockWriter
type MockWriterMockRecorder struct {
	mock *MockWriter
}

// NewMockWriter creates a new mock instance
func NewMockWriter(ctrl *gomock.Controller) *MockWriter {
	mock := &MockWriter{ctrl: ctrl}
	mock.recorder = &MockWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWriter) EXPECT() *MockWriterMockRecorder {
	return m.recorder
}

// Write mocks base method
func (m *MockWriter) Write(ctx context.Context, envelopes []*loggregator_v2.Envelope) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", ctx, envelopes)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write
func (mr *MockWriterMockRecorder) Write(ctx, envelopes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockWriter)(nil).Write), ctx, envelopes)
}

// MockNexter is a mock of Nexter interface
type MockNexter struct {
	ctrl     *gomock.Controller
	recorder *MockNexterMockRecorder
}

// MockNexterMockRecorder is the mock recorder for MockNexter
type MockNexterMockRecorder struct {
	mock *MockNexter
}

// NewMockNexter creates a new mock instance
func NewMockNexter(ctrl *gomock.Controller) *MockNexter {
	mock := &MockNexter{ctrl: ctrl}
	mock.recorder = &MockNexterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNexter) EXPECT() *MockNexterMockRecorder {
	return m.recorder
}

// TryNext mocks base method
func (m *MockNexter) TryNext() (*loggregator_v2.Envelope, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryNext")
	ret0, _ := ret[0].(*loggregator_v2.Envelope)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// TryNext indicates an expected call of TryNext
func (mr *MockNexterMockRecorder) TryNext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryNext", reflect.TypeOf((*MockNexter)(nil).TryNext))
}

// MockBatchWriter is a mock of BatchWriter interface
type MockBatchWriter struct {
	ctrl     *gomock.Controller
	recorder *MockBatchWriterMockRecorder
}

// MockBatchWriterMockRecorder is the mock recorder for MockBatchWriter
type MockBatchWriterMockRecorder struct {
	mock *MockBatchWriter
}

// NewMockBatchWriter creates a new mock instance
func NewMockBatchWriter(ctrl *gomock.Controller) *MockBatchWriter {
	mock := &MockBatchWriter{ctrl: ctrl}
	mock.recorder = &MockBatchWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBatchWriter) EXPECT() *MockBatchWriterMockRecorder {
	return m.recorder
}

// Write mocks base method
func (m *MockBatchWriter) Write(envelopes []*loggregator_v2.Envelope) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", envelopes)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write
func (mr *MockBatchWriterMockRecorder) Write(envelopes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockBatchWriter)(nil).Write), envelopes)
}

// MockMetricClient is a mock of MetricClient interface
type MockMetricClient struct {
	ctrl     *gomock.Controller
	recorder *MockMetricClientMockRecorder
}

// MockMetricClientMockRecorder is the mock recorder for MockMetricClient
type MockMetricClientMockRecorder struct {
	mock *MockMetricClient
}

// NewMockMetricClient creates a new mock instance
func NewMockMetricClient(ctrl *gomock.Controller) *MockMetricClient {
	mock := &MockMetricClient{ctrl: ctrl}
	mock.recorder = &MockMetricClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMetricClient) EXPECT() *MockMetricClientMockRecorder {
	return m.recorder
}

// NewCounter mocks base method
func (m *MockMetricClient) NewCounter(name string, opts ...interface{}) interface{} {
	m.ctrl.T.Helper()
	varargs := []interface{}{name}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewCounter", varargs...)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// NewCounter indicates an expected call of NewCounter
func (mr *MockMetricClientMockRecorder) NewCounter(name interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewCounter", reflect.TypeOf((*MockMetricClient)(nil).NewCounter), varargs...)
} 