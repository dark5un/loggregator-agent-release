// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	"sync"
	
	loggregator_v2 "code.cloudfoundry.org/go-loggregator/v10/rpc/loggregator_v2"
	mock "github.com/stretchr/testify/mock"
)

// BatchWriter is an autogenerated mock type for the BatchWriter type
type BatchWriter struct {
	mock.Mock
	mu    sync.Mutex
	Calls int
}

// Write provides a mock function with given fields: msgs
func (_m *BatchWriter) Write(msgs []*loggregator_v2.Envelope) error {
	ret := _m.Called(msgs)
	
	_m.mu.Lock()
	_m.Calls++
	_m.mu.Unlock()

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]*loggregator_v2.Envelope) error); ok {
		r0 = rf(msgs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCalls returns the current call count in a thread-safe way
func (_m *BatchWriter) GetCalls() int {
	_m.mu.Lock()
	defer _m.mu.Unlock()
	return _m.Calls
}

// NewBatchWriter creates a new instance of BatchWriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBatchWriter(t interface {
	mock.TestingT
	Cleanup(func())
}) *BatchWriter {
	mock := &BatchWriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
