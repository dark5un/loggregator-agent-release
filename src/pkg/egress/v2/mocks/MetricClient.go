// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	metrics "code.cloudfoundry.org/go-metric-registry"
	mock "github.com/stretchr/testify/mock"
)

// MetricClient is an autogenerated mock type for the MetricClient type
type MetricClient struct {
	mock.Mock
}

// NewCounter provides a mock function with given fields: name, helpText, opts
func (_m *MetricClient) NewCounter(name string, helpText string, opts ...metrics.MetricOption) metrics.Counter {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name, helpText)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for NewCounter")
	}

	var r0 metrics.Counter
	if rf, ok := ret.Get(0).(func(string, string, ...metrics.MetricOption) metrics.Counter); ok {
		r0 = rf(name, helpText, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metrics.Counter)
		}
	}

	return r0
}

// NewMetricClient creates a new instance of MetricClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMetricClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MetricClient {
	mock := &MetricClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
